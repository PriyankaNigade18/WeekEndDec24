
Selenium WebDriver
===========================
Selenium WebDriver is an interface
WebDriver is an API for WebUi automation Testing
=============================================================
WebDriver setup on Java Project
---------------------------------
1.craete new Java project
2.Download selenium java JAR file: selenium.dev
3.Right click on project--->Build path--->Configure build path
--->Library--->Class path--->Add external Jar-->Selenium JAR
=================================================
WebDriver into Maven Project
==================================
Maven is build and Project management tool

Maven pom.xml
====================
Pom stands for Project Object Model
This is project configuration file
add require dependencies

dependecy is a library(executable file)

POM.xml Structure
===================
<project>

<dependecies>

<dependency>Selenium_Java</dependency>

</dependecies>
<build>

<plugins>
</plugins>

</build>

</project>

==========================================
Maven support two repositories
================================
1.Local Repo
------------------------
c/users/.m2 folder

2.Central/Remote repo
---------------------------
mvnrepository.com

Selenium Commands
============================
1.Browser commands
==========================
1.get(url): open application 
2.getTitle(): get the title of application
3.getCurrentUrl(): get the current url of application
4.getPageSource(): get the page source
multiple window Handling
------------------------
5.getWindowHandle(): get the parent/active window Id
6.getWindowHandles(): get the all Windows Id
7.close():close current active window
8.quit(): close all open windows by selenium

========================================
2.Navigation Commands
==========================
Selenium Provides Navigation Interface

1.to(url): to navigate any other application
--------------------
driver.navigate().to(url)

2.back()
--------------
driver.navigate().back()

3.forward()
----------------
driver.navigate().forward()

4.refresh()
------------------
driver.navigate().refresh()


What is WebElement in Selenium?
===============================
Any GUI element is refer as WebElement and Technically
WebElement is Interface in Selenium

How to Automate any WebElement?
==================================
1.get the address of WebElement
2.using selenium perform actions on WebElement

How Selenium Identify any WebElement?
=========================================
Selenium Identify WebElement using Locators

What is Locator?
====================
Locator is address of WebElement from that Webpage

Selenium Support total 8 Locators
=================================
1.By id (primary)
2.By name
3.By className
4.By linkText
5.By partailLinkText
6.By tagName
Dynamic
---------------
7.By cssSelector
8.By Xpath

Seleium 4 support Relative locators
=====================================


What is By?
==============
By is Class in Selenium

Using locators you will get the address of element
To identify by selenium we use method

1.findElment()
===================
- Single element identify
- return type of this method is WebElement interface object
- If element not found then it return NoSuchElementException


2.findEelements()
=======================
- Multiple similar elements identification
- return type of this method is List<Webelement>
- If element not found it returns [] list not exception

===========================================================
Locators
===============
1.By id





By className
=====================
<input type="submit" value="Login" class="btn btn-primary">

class="btn    btn-primary"
	  class1     class2
	  
	  //InvalidSelectorException: Compound class names not permitted

class="btn btn-default btn-primary"
		c1      c2        c3


class="oxd-button oxd-button--medium oxd-button--main orangehrm-login-button"
			c1		c2					c3				c4
=====================================================================

How to Automate Any HyperLink
==========================================

<a id="SignIn" href="login.html">Sign In</a>
                              <a>Link Text</a>

1. By linkText(Full text)
=============================
driver.findElement(By.linkText("Sign In")).click();


2. By partialLinkText(partial Text)
=========================================
driver.findElement(By.partialLinkText("In")).click();



===================================
By tagName
==================
Number of input boxes

Number of Imges 

Number of links

Number of button

finding number of elements we have to use findElements()

===============================================================
WebElement Methods
===================
1.validation methods
-----------------------
1.isEnabled()
2.isDisplayed()
3.isSelected()

2.Special commands
===================
1.getText()
============
- this command help you to get visible text from application
- any html inner text also we are able to get using getText()

2.getAttribute() is deprecated--->4.27 getDomAttribute() and getDomProperty()
================================================================
- this commands help you to get any attribute or property value of any element



===============================================================
Synchronization Issue in Selenium
======================================
Time mapping problem in between application and tool is called Synchronization issue

Selenium Provides Dynamic Wait to handle this issue
------------------------------------------
1.Implicit Wait
-================
- It global wait 
- applicable to complete script/element
- add wait after initilization of driver

driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));

------------------------------------------------------
2.Explicit Wait
========================
- It is applicable for single WebElement
- It is based on certain condition we are able to apply wait

1.WebDriverWait class
2.FluentWait class

WebDriverWait(c) extends FluentWait(c) implements Wait(I)
===========================================================

=======================================
DynamiC Locators
====================
1. By cssSelector
==================

what is Css?
===================
It is cascaded style sheet ,language which used to design and provide styles to webelement


What is cssSelector
========================
-It is locator used to automate element by using css property
-CssSelector is travel only form parent element to child element
- Backward travel is not supported,CssSelector is faster than Xpath because of this nature
-CssSelector doesn't support any method

Css patterns
====================
1.tagName with id
--------------------
Syntax:
============
tagname#id

<input id="input-email" class="form-control">

input#input-email

#input-email


2.tagName with attribute
-------------------------------
Syntax:
============
tagname[attribute='value']
<input type="password"  value="" placeholder="Password" >

input[placeholder='Password']

3.tagName with className
------------------------------
Syntax:
============
tagname.classname

<input type="submit" value="Login" class="btn btn-primary">

input.btn.btn-primary



4.tagName with id,className and attribute
-----------------------------------------------
syntax:
============
tagname#id.classname[attribute='value']

<input type="submit" value="Login" class="btn btn-primary">

input.btn.btn-primary[value='Login']

====================================================
8.By xpath
==============
-xpath is path of the element from xml/html document
-xpath identify elements directly from DOM(Document Object Model)
==================================================================
----------HTML DOM------------------------
<html>----------------------root element
<head>

</head>
<body>

<input>
<div>------------------UI element
<a>
<button>

</body>
</html>
==================================================
Types Of Xpath
=================
1.Absolute Xpath(Full xpath)
=============================
- Absolute xpath start identification from root element
- Absolute xpath start with '/'

/html/body/div[2]/div/div/div/div[2]/div/form/div[1]/input

2.Relative Xpath(partial Xpath)
================================
- Relative xpath identify element from its relative property
- Relative xpath starts with '//'

//*[@id="input-email"]

* any tag/All tag
=================================
Syntax:
=====================
//tagname[@attribute='value']

====================================================================
Xpath with Operator
====================
1. and
================
syntax
==========
//tagname[@attribute1='value' and @attribute2='value']

2. or
=================
syntax
==========
//tagname[@attribute1='value' or @attribute2='value']
--------------------------------------------------------------------
xpath with index and position()
==============================
Syntax:
================
(xpath)[index]

or
(xpath)[position()=index]
xpath Methods
======================
1.text()
===============
- to identify element with visible text  use text()
- text() never ignore white space

Syntax
=========
//tagname[text()='text']
--------------------------------------------

2.normalize-space()
=====================
- to identify element with visible text  use normalize-space()
- normalize-space() ignore white space
Syntax:
=============
//tagname[normalize-space()='text']

3.contains(): partial match
================================
id="twotabsearchtextbox"

Syntax:
===========
//tagname[contains(@attribute,'partial value')]

or

//tagname[contains(text(),'partial text')]

-------------------------------------------------
4.startsWith():prefix value

Syntax:
==============
//tagname[starts-with(@attribute,'prefix value')]

========================================================
xpath Axies
==================
1.Ancestor
Syntax:
=========
//tagname[@attribute1='value']//ancestor::tagname of ancestor

2.Parent
Syntax:
=========
//tagname[@attribute1='value']//parent::tagname of parent

3.Child
Syntax:
=========
//tagname[@attribute1='value']//child::tagname of child

4.Following
Syntax:
=========
//tagname[@attribute1='value']//following::tagname of follwing element

5.Following-sibling
Syntax:
==============
//tagname[@attribute1='value']//following-sibling::tagname of follwing element


6.Preceding
Syntax:
==============
//tagname[@attribute1='value']//preceding::tagname of preceding element


7.Preceding-sibling
Syntax:
==============
//tagname[@attribute1='value']//preceding-sibling::tagname of preceding element

<tbody>--------------ancestor
<tr>----------------Parent
 
         <td>4</td>     preceding-sibling

          <td>John</td>---------------Element

          <td>Robinson</td>
							following-sibling
          <td>jr5527</td>
 
         <td>
              <a href="user.html"><i class="icon-pencil"></i></a>
              <a role="button" href="#myModal" data-toggle="modal"><i class="icon-remove"></i></a>
          </td>

        </tr>
        
        </tbody>
================================================================
Relative locators
=======================
toLeftOf()
toRightOf()
near()
above()
below()
=======================================================================

Dropdown Automation
========================
1.How to automate dropdown which is based on <Select>
=========================================
Selenium support Select class
Select s1=new Select(dropdown address);

Is dropdown support multiple selection-isMultiple()

Single Selection
==================
1.selectByVisileText("")
2.selectByIndex(index)
3.selectByValue("")

How to get all options
=======================
getOptions()

2.How to automate AutoSuggestion/Javascript/Bootstrap
==========================================


3.How to automate any dissapper elements



========================================================
calendar

Multiple windows

Alerts

frames

WebTable

Actions

JavaScriptExecutor

svg elements
Frameworks


Actions class











































2.By xpath
========================
































